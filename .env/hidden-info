.rgba-primary-0 { color: rgba( 98, 15, 19,1) }	/* Main Primary color */
.rgba-primary-1 { color: rgba(170, 72, 77,1) }
.rgba-primary-2 { color: rgba(135, 40, 45,1) }
.rgba-primary-3 { color: rgba( 62,  0,  3,1) }
.rgba-primary-4 { color: rgba( 32,  0,  2,1) }


clientId = "4986258db999480dbcb94669e69535ad"
clientSecret = "50a5f956f0f84b278d3d90745c3308b5"
userId = "12172782523"

  //-----------------------------------//
  //--------API Function Module--------//
  //-----------------------------------//

  //fetch play/pause
  const playFunction = async (token) => {
    const result = await fetch(`https://api.spotify.com/v1/me/player/play`, {
      method: "PUT",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      body:
        '{"context_uri":"spotify:album:5ht7ItJgpBH7W6vJ5BqpPr","offset":{"position":5},"position_ms":0}',
    });
    const data = await result.json();
    console.log("playing", data);
    return data;
  };

  playFunction(token) {
      return playFunction(token);
    }

    //-----------------------------------//
//-----SDK/API Playback Module-------//
//-----------------------------------//

//initialize local connect device on browser
window.onSpotifyWebPlaybackSDKReady = () => {
  const token =
    "BQARGidQTtiT-GTY0DQHnA0GFZvUwJ5AX04paLm3kcl02cSp5g7wFvWq09il69jTX_lGvZbhLNXboVp_rL1MnH8GNzF3bC5ELRYdlXcxq48udg9P_-A_ADYcdaZptiwu3IZ2RIJqDnsn_9mSOqEEaMs9ZjMrHDkapLbH";
  const player = new Spotify.Player({
    name: 'GVO Player',
    getOAuthToken: cb => {
      cb(token);
    },
    volume: 0.5,
    });

  // Error handling
  player.addListener("initialization_error", ({ message }) => {
    console.error(message);
  });
  player.addListener("authentication_error", ({ message }) => {
    console.error(message);
  });
  player.addListener("account_error", ({ message }) => {
    console.error(message);
  });
  player.addListener("playback_error", ({ message }) => {
    console.error(message);
  });

  // Playback status updates
  player.addListener("player_state_changed", (state) => {
    console.log(state);
  });

  // Ready
  player.addListener("ready", ({ device_id }) => {
    console.log("Ready with Device ID", device_id);
  });

  // Not Ready
  player.addListener("not_ready", ({ device_id }) => {
    console.log("Device ID has gone offline", device_id);
  });

  // Connect to the player!
  player.connect();

};

switch (description.split(" ").includes(`${genreId}`)) {
               case "chill":
               case "rainy-day":
               case "sleep":
               case "study":
                 console.log('chill vibes');
                break;
               case "hip-hop":
                console.log('hip-hop vibes');
                break;
               case "sad":
                console.log('sad vibes');
                break;
               case "r-n-b":
               case "soul":
               case "romance":
                console.log('feely vibes');
                break;
               case "work-out":
               case "party":
               case "pop":
               case "club":
                console.log('litty vibes');
                break;
         }

         else {
            uiCtrl.resetPlaylists();
            i = playlist.items.length;
            
            alert(`No playlists for that genre [error${i}`);
            asyncOps();
            break
          }

          const playlistListener = async () => {
       retrieve token
       let token = uiCtrl.getStoredToken().token;
       console.log(token)
       
       const items = document.querySelectorAll(".playlist-library").firstChild;
       console.log(items);
       items.addEventListener("change", (e) => {
         uiCtrl.resetPlaylists();
         console.log(`${e.value}`)
       })
    }